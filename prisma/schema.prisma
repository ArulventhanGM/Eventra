// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums converted to strings for SQLite compatibility
// UserRole: ATTENDEE, ORGANIZER, VOLUNTEER, SPONSOR, ADMIN
// EventStatus: DRAFT, PUBLISHED, ONGOING, COMPLETED, CANCELLED  
// EventCategory: TECH, CULTURAL, SPORTS, LITERARY, ACADEMIC, SOCIAL, WORKSHOP, SEMINAR, CONFERENCE, OTHER
// TicketType: FREE, PAID
// TicketStatus: ACTIVE, USED, CANCELLED, EXPIRED
// RegistrationStatus: PENDING, CONFIRMED, CANCELLED, WAITLISTED

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  college     String?
  department  String?
  year        String?
  rollNumber  String?
  role        String   @default("ATTENDEE")
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  organizedEvents    Event[]           @relation("EventOrganizer")
  registrations      Registration[]
  tickets            Ticket[]
  volunteerShifts    VolunteerShift[]
  sponsorships       Sponsorship[]
  feedback           Feedback[]
  announcements      Announcement[]
  checkIns           CheckIn[]
  sessions           Session[]         @relation("SessionSpeaker")

  @@map("users")
}

model Event {
  id              String        @id @default(cuid())
  title           String
  description     String
  shortDescription String?
  bannerImage     String?
  category             String
  status               String        @default("DRAFT")
  startDate       DateTime
  endDate         DateTime
  registrationDeadline DateTime?
  venue           String
  capacity        Int?
  isOnline        Boolean       @default(false)
  onlineLink      String?
    ticketType           String        @default("FREE")
  ticketPrice     Float?        @default(0)
  tags            String? // JSON string for SQLite compatibility
  organizerId     String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relations
  organizer       User           @relation("EventOrganizer", fields: [organizerId], references: [id])
  sessions        Session[]
  registrations   Registration[]
  tickets         Ticket[]
  sponsors        Sponsorship[]
  volunteers      VolunteerShift[]
  announcements   Announcement[]
  feedback        Feedback[]
  checkIns        CheckIn[]

  @@map("events")
}

model Session {
  id          String   @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  venue       String?
  capacity    Int?
  eventId     String
  speakerId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  event       Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)
  speaker     User?     @relation("SessionSpeaker", fields: [speakerId], references: [id])
  checkIns    CheckIn[]

  @@map("sessions")
}

model Registration {
  id               String             @id @default(cuid())
  userId           String?            // Optional - for registered users
  eventId          String
  
  // Guest registration fields
  fullName         String?
  email            String?
  college          String?
  department       String?
  phoneNumber      String?
  teamName         String?
  numberOfMembers  Int?               @default(1)
  additionalInfo   String?
  registrationId   String?            @unique
  
  status           String             @default("PENDING")
  registeredAt     DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  // Relations
  user             User?              @relation(fields: [userId], references: [id])
  event            Event              @relation(fields: [eventId], references: [id], onDelete: Cascade)
  ticket           Ticket?

  @@unique([userId, eventId])
  @@unique([email, eventId])
  @@map("registrations")
}

model Ticket {
  id             String       @id @default(cuid())
  qrCode         String       @unique
  userId         String
  eventId        String
  registrationId String       @unique
  status         String       @default("ACTIVE")
  issuedAt       DateTime     @default(now())
  usedAt         DateTime?

  // Relations
  user           User         @relation(fields: [userId], references: [id])
  event          Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  registration   Registration @relation(fields: [registrationId], references: [id])

  @@map("tickets")
}

model CheckIn {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  sessionId String?
  timestamp DateTime @default(now())
  type      String   @default("EVENT") // EVENT, SESSION, BOOTH

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  session   Session? @relation(fields: [sessionId], references: [id])

  @@map("check_ins")
}

model VolunteerShift {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  eventId     String
  volunteerId String
  checkedInAt DateTime?
  checkedOutAt DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  volunteer   User  @relation(fields: [volunteerId], references: [id])

  @@map("volunteer_shifts")
}

model Sponsorship {
  id          String   @id @default(cuid())
  eventId     String
  sponsorId   String
  packageType String   // GOLD, SILVER, BRONZE, CUSTOM
  amount      Float
  logoUrl     String?
  websiteUrl  String?
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  event       Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  sponsor     User  @relation(fields: [sponsorId], references: [id])

  @@map("sponsorships")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  message   String
  eventId   String
  authorId  String
  isUrgent  Boolean  @default(false)
  sentAt    DateTime @default(now())

  // Relations
  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  author    User  @relation(fields: [authorId], references: [id])

  @@map("announcements")
}

model Feedback {
  id        String   @id @default(cuid())
  eventId   String
  userId    String
  rating    Int      @default(5) // 1-5 stars
  comment   String?
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())

  // Relations
  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User  @relation(fields: [userId], references: [id])

  @@unique([eventId, userId])
  @@map("feedback")
}

model Venue {
  id          String @id @default(cuid())
  name        String
  capacity    Int
  location    String
  description String?
  isActive    Boolean @default(true)

  @@map("venues")
}